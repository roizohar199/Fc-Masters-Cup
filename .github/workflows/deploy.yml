name: Deploy

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # ---------- CLIENT ----------
      - name: Install client deps
        working-directory: client
        run: npm ci

      - name: Build client
        working-directory: client
        run: npm run build

      # ---------- SERVER ----------
      # מתקינים עם dev כדי לאפשר tsc ואז בונים ומנקים dev
      - name: Install server deps (with dev)
        working-directory: server
        run: npm ci

      - name: Build server (TS -> dist)
        working-directory: server
        run: |
          if [ -f package.json ] && cat package.json | jq -e '.scripts.build' > /dev/null 2>&1; then
            npm run build
          fi
          # מסירים devDependencies מה-node_modules כדי לא לשלוח סתם נפח
          npm prune --omit=dev

      # ---------- PACK ARTIFACTS ----------
      - name: Pack artifacts
        run: |
          rm -rf _artifact
          mkdir -p _artifact/client/dist
          mkdir -p _artifact/server/dist

          # client build only
          rsync -a --delete client/dist/ _artifact/client/dist/

          # server: dist + מינימום קבצים להפעלה
          rsync -a server/dist/ _artifact/server/dist/
          cp server/package.json _artifact/server/package.json
          [ -f server/package-lock.json ] && cp server/package-lock.json _artifact/server/package-lock.json || true
          # אם יש קובץ PM2/ENV/CONFIG ספציפי שהשרת צריך, הוסף כאן העתקה שלו

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fcmasters-artifact
          path: _artifact

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: fcmasters-artifact
          path: _artifact

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Known hosts
        run: |
          PORT=${{ secrets.VPS_PORT || 22 }}
          ssh-keyscan -p "$PORT" -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Rsync to server
        run: |
          PORT=${{ secrets.VPS_PORT || 22 }}
          SSH_CMD="ssh -p $PORT"
          $SSH_CMD ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /var/www/fcmasters/server /var/www/fcmasters/client/dist"

          rsync -az --delete -e "$SSH_CMD" \
            _artifact/client/dist/ \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/www/fcmasters/client/dist/

          rsync -az --delete -e "$SSH_CMD" \
            _artifact/server/ \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/www/fcmasters/server/

      - name: Install server deps + restart PM2 on VPS
        run: |
          PORT=${{ secrets.VPS_PORT || 22 }}
          ssh -p "$PORT" ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -euo pipefail
          cd /var/www/fcmasters/server

          # מתקינים prod deps לפי ה-package-lock שהעברנו
          if [ -f package-lock.json ]; then
            npm ci --omit=dev
          else
            npm install --omit=dev
          fi

          # PM2 reload / start
          if command -v pm2 >/dev/null 2>&1; then
            if pm2 describe fcmasters > /dev/null 2>&1; then
              pm2 restart fcmasters --update-env
            else
              # נסה קודם dist/index.js, ואם לא קיים אז index.js
              if [ -f dist/index.js ]; then
                pm2 start dist/index.js --name fcmasters
              else
                pm2 start index.js --name fcmasters
              fi
            fi
            pm2 save
          else
            echo "PM2 not found on server. Install with: npm i -g pm2"
            exit 1
          fi
          EOF
