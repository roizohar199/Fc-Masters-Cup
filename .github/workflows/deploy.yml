name: Deploy

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # ---------- CLIENT ----------
      - name: Install client deps
        working-directory: client
        run: npm ci

      - name: Build client
        working-directory: client
        run: npm run build

      # ---------- SERVER ----------
      - name: Install server deps (with dev)
        working-directory: server
        run: npm ci

      - name: Build server (TS -> dist) + prune dev
        working-directory: server
        shell: bash
        run: |
          npm run build || echo "no build script"
          npm prune --omit=dev

      # ---------- PACK ARTIFACTS ----------
      - name: Pack artifacts
        shell: bash
        run: |
          rm -rf _artifact
          mkdir -p _artifact/client/dist
          mkdir -p _artifact/server/dist
          rsync -a --delete client/dist/ _artifact/client/dist/
          rsync -a server/dist/        _artifact/server/dist/
          cp server/package.json       _artifact/server/package.json
          [ -f server/package-lock.json ] && cp server/package-lock.json _artifact/server/package-lock.json || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fcmasters-artifact
          path: _artifact

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: fcmasters-artifact
          path: _artifact

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add host to known_hosts
        shell: bash
        run: |
          set -euo pipefail
          HOST="${{ secrets.VPS_HOST }}"
          PORT="${{ secrets.VPS_PORT }}"
          : "${PORT:=22}"
          mkdir -p ~/.ssh
          ssh-keyscan -p "$PORT" -H "$HOST" >> ~/.ssh/known_hosts

      - name: Test SSH connection
        shell: bash
        run: |
          HOST="${{ secrets.VPS_HOST }}"
          USER="${{ secrets.VPS_USER }}"
          PORT="${{ secrets.VPS_PORT }}"
          : "${PORT:=22}"
          ssh -p "$PORT" "$USER@$HOST" "echo '‚úÖ SSH OK'; uname -a"

      # ---------- SAFE BACKUP (DB) ----------
      - name: Pre-deploy DB backup (safe & optional)
        shell: bash
        run: |
          HOST="${{ secrets.VPS_HOST }}"
          USER="${{ secrets.VPS_USER }}"
          PORT="${{ secrets.VPS_PORT }}"
          : "${PORT:=22}"
          ssh -p "$PORT" "$USER@$HOST" << 'EOF'
          set -euo pipefail
          DB="/var/www/fcmasters/server/tournaments.sqlite"
          BKDIR="/var/www/fcmasters/server/backups"
          if [ -f "$DB" ]; then
            mkdir -p "$BKDIR"
            # ◊ê◊ù sqlite3 ◊ß◊ô◊ô◊ù ‚Äì ◊û◊ë◊¶◊¢ ◊í◊ô◊ë◊ï◊ô ◊†◊ß◊ô ◊ú◊ß◊ï◊ë◊• ◊ô◊ó◊ô◊ì
            if command -v sqlite3 >/dev/null 2>&1; then
              sqlite3 "$DB" "VACUUM INTO '${BKDIR}/tournaments-$(date +%F_%H-%M).sqlite'"
              echo "üì¶ DB backup created in $BKDIR"
            else
              echo "‚ö†Ô∏è sqlite3 not found, skipping backup"
            fi
          else
            echo "‚ÑπÔ∏è No DB file at $DB, skipping backup"
          fi
          EOF

      # ---------- RSYNC (SAFE) ----------
      - name: Rsync to server (safe)
        shell: bash
        run: |
          set -euo pipefail
          HOST="${{ secrets.VPS_HOST }}"
          USER="${{ secrets.VPS_USER }}"
          PORT="${{ secrets.VPS_PORT }}"
          : "${PORT:=22}"
          SSH_CMD="ssh -p $PORT"

          # ◊ï◊ì◊ê ◊™◊ß◊ô◊ï◊™
          $SSH_CMD "$USER@$HOST" "mkdir -p /var/www/fcmasters/client/dist /var/www/fcmasters/server/dist"

          echo "üîÑ Sync client dist (delete old assets)‚Ä¶"
          rsync -avz --delete -e "$SSH_CMD" _artifact/client/dist/ "$USER@$HOST:/var/www/fcmasters/client/dist/"

          echo "üîÑ Sync server dist only (delete inside dist)‚Ä¶"
          rsync -avz --delete -e "$SSH_CMD" _artifact/server/dist/ "$USER@$HOST:/var/www/fcmasters/server/dist/"

          echo "üì¶ Update server package files (no delete at root)‚Ä¶"
          rsync -avz -e "$SSH_CMD" _artifact/server/package.json "$USER@$HOST:/var/www/fcmasters/server/package.json"
          if [ -f _artifact/server/package-lock.json ]; then
            rsync -avz -e "$SSH_CMD" _artifact/server/package-lock.json "$USER@$HOST:/var/www/fcmasters/server/package-lock.json"
          fi

      # ---------- INSTALL & PM2 ----------
      - name: Install server deps + restart PM2
        shell: bash
        run: |
          set -euo pipefail
          HOST="${{ secrets.VPS_HOST }}"
          USER="${{ secrets.VPS_USER }}"
          PORT="${{ secrets.VPS_PORT }}"
          : "${PORT:=22}"

          ssh -p "$PORT" "$USER@$HOST" << 'EOF'
          set -euo pipefail
          cd /var/www/fcmasters/server

          echo "üì¶ Installing server dependencies‚Ä¶"
          if [ -f package-lock.json ]; then
            npm ci --omit=dev
          else
            npm install --omit=dev
          fi

          if [ ! -f dist/index.js ]; then
            echo "‚ùå ERROR: dist/index.js not found!"
            exit 1
          fi

          if command -v pm2 >/dev/null 2>&1; then
            pm2 delete fcmasters || true
            pm2 start dist/index.js --name fcmasters
            pm2 save
            pm2 list
          else
            echo "‚ùå PM2 not found on server. Install with: npm i -g pm2"
            exit 1
          fi
          EOF
