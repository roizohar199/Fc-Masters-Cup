name: Build and Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            server/package-lock.json
            client/package-lock.json

      # אופציונלי – אם יש תלות בשורש
      - name: Install root deps
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm ci --no-audit --fund=false

      - name: Install server dependencies
        working-directory: server
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --fund=false
          else
            npm install --no-audit --fund=false
          fi

      - name: Install client dependencies
        if: ${{ hashFiles('client/package.json') != '' }}
        working-directory: client
        env:
          NPM_CONFIG_OPTIONAL: "true"
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --fund=false
          else
            npm install --no-audit --fund=false
          fi

      - name: Verify server tree
        working-directory: server
        run: npm ls >/dev/null

      - name: Verify client tree
        if: ${{ hashFiles('client/package.json') != '' }}
        working-directory: client
        run: npm ls >/dev/null

      - name: Build server
        working-directory: server
        run: npm run build

      - name: Build client
        working-directory: client
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            server/dist/
            client/dist/
            package.json
            server/package.json
            server/package-lock.json
            .env.example
          retention-days: 7

  deploy:
    name: Deploy to VPS
    needs: build
    if: ${{ github.ref == 'refs/heads/master' && needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifact

      # טוען את המפתח הפרטי ל-ssh-agent (פותר Permission denied ו-libcrypto errors)
      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # מוסיף את השרת ל-known_hosts (ללא אינטראקציה)
      - name: Add VPS host to known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST || secrets.VPS_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT || '22' }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # דפלוי אטומי: העלאה לתיקיית release חדשה והחלפת symlink
      - name: Deploy to VPS (rsync + atomic release)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST || secrets.VPS_HOST }}
          SSH_USER: ${{ secrets.SSH_USER || secrets.VPS_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT || '22' }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH || '/var/www/fcmasters' }}
          RUN: ${{ github.run_number }}
        run: |
          set -e
          
          RELEASE_DIR="${DEPLOY_PATH}/releases/${RUN}"
          
          echo "🚀 Deploying build #${RUN} to ${SSH_USER}@${SSH_HOST}:${RELEASE_DIR}"
          
          # יצירת תיקיית release בשרת
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "mkdir -p ${RELEASE_DIR}"
          
          # העלאת artifacts (server/dist + client/dist)
          echo "📦 Uploading build artifacts..."
          rsync -az -e "ssh -p $SSH_PORT" --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'tournaments.sqlite' \
            ./artifact/ "$SSH_USER@$SSH_HOST:${RELEASE_DIR}/"
          
          echo "⚙️  Running remote deployment commands..."
          
      - name: Install dependencies and switch release
        env:
          SSH_HOST: ${{ secrets.SSH_HOST || secrets.VPS_HOST }}
          SSH_USER: ${{ secrets.SSH_USER || secrets.VPS_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT || '22' }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH || '/var/www/fcmasters' }}
          RUN: ${{ github.run_number }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" bash -lc "
            set -e
            
            APP_DIR='${DEPLOY_PATH}'
            RELEASE_DIR=\"\${APP_DIR}/releases/${RUN}\"
            
            echo '📦 Installing production dependencies...'
            cd \"\${RELEASE_DIR}/server\"
            npm ci --only=production --no-audit --fund=false
            
            # העתקת .env מהגרסה הנוכחית (אם קיימת)
            if [ -f \"\${APP_DIR}/current/.env\" ]; then
              echo '🔐 Copying .env from current release...'
              cp \"\${APP_DIR}/current/.env\" \"\${RELEASE_DIR}/.env\"
            fi
            
            # העתקת DB קיים (שמירת נתונים)
            if [ -f \"\${APP_DIR}/current/tournaments.sqlite\" ]; then
              echo '💾 Copying database from current release...'
              cp \"\${APP_DIR}/current/tournaments.sqlite\" \"\${RELEASE_DIR}/tournaments.sqlite\"
            fi
            
            # החלפת symlink אטומית
            echo '🔄 Switching to new release...'
            ln -sfn \"\${RELEASE_DIR}\" \"\${APP_DIR}/current\"
            
            # טעינה מחדש של השירות (graceful reload)
            echo '♻️  Reloading application...'
            if command -v pm2 >/dev/null 2>&1; then
              pm2 reload fcmasters || pm2 start \"\${APP_DIR}/current/server/dist/index.js\" --name fcmasters
            elif command -v systemctl >/dev/null 2>&1; then
              sudo systemctl reload fcmasters || sudo systemctl restart fcmasters
            else
              echo '⚠️  Warning: No process manager found (pm2/systemd). Manual restart needed.'
            fi
            
            # ניקוי גרסאות ישנות (שמירת 5 אחרונות)
            echo '🧹 Cleaning up old releases...'
            cd \"\${APP_DIR}/releases\"
            ls -t | tail -n +6 | xargs -r rm -rf
            
            echo '✅ Deployment completed successfully!'
          "
